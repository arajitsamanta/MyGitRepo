<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"	
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">


	<bean id="helloSpring" class="com.spring.learning.HelloSpring">
		<!--init-method="init" destroy-method="destroy" -->
		<property name="message" value="Hello World!" />
		<property name="message2" value="Hello Second World!" />
	</bean>

	<!-- <bean class="com.spring.learning.InitHelloSpring" /> -->


	<bean id="beanTeamplate" abstract="true">
		<property name="message" value="Hello World!" />
		<property name="message2" value="Hello Second World!" />
		<property name="message3" value="Namaste India!" />
	</bean>

	<bean id="helloIndia" class="com.spring.learning.HelloIndia"
		parent="beanTeamplate">
		<property name="message" value="Hello India!" />
		<property name="message3" value="Namaste India!" />
	</bean>

	<bean id="spellChecker" class="com.spring.learning.SpellChecker" />

	<!-- Definition for textEditor bean using inner bean -->
	<bean id="textEditor" class="com.spring.learning.TextEditor">
		<property name="spellChecker" ref="spellChecker" />
	</bean>



	<!-- Definition for javaCollection -->
	<bean id="javaCollection" class="com.spring.learning.JavaCollection">

		<!-- results in a setAddressList(java.util.List) call -->
		<property name="addressList">
			<list>
				<!-- <ref bean="address1"/> -->
				<value>INDIA</value>
				<value>Pakistan</value>
				<value>USA</value>
				<value>USA</value>
			</list>
		</property>

		<!-- results in a setAddressSet(java.util.Set) call -->
		<property name="addressSet">
			<set>
				<value>INDIA</value>
				<value>Pakistan</value>
				<value>USA</value>
				<value>USA</value>
			</set>
		</property>

		<!-- results in a setAddressMap(java.util.Map) call -->
		<property name="addressMap">
			<map>
				<entry key="1" value="INDIA" />
				<entry key="2" value="Pakistan" />
				<entry key="3" value="USA" />
				<entry key="4" value="USA" />
			</map>
		</property>

		<!-- results in a setAddressProp(java.util.Properties) call -->
		<property name="addressProp">
			<props>
				<prop key="one">INDIA</prop>
				<prop key="two">Pakistan</prop>
				<prop key="three">USA</prop>
				<prop key="four">USA</prop>
			</props>
		</property>


	</bean>


	<bean id="cStartEventHandler" class="com.spring.learing.events.CStartEventHandler" />

	<bean id="cStopEventHandler" class="com.spring.learing.events.CStopEventHandler" />


	<bean id="customEventHandler" class="com.spring.learing.events.CustomEventHandler" />

	<bean id="customEventPublisher" class="com.spring.learing.events.CustomEventPublisher" />


	<!-- <aop:config> <aop:aspect id="log" ref="logging"> <aop:pointcut id="selectAll" 
		expression="execution(* com.spring.learning.aop.*.*(..))"/> <aop:before pointcut-ref="selectAll" 
		method="beforeAdvice"/> <aop:after pointcut-ref="selectAll" method="afterAdvice"/> 
		<aop:after-returning pointcut-ref="selectAll" returning="retVal" method="afterReturningAdvice"/> 
		<aop:after-throwing pointcut-ref="selectAll" throwing="ex" method="AfterThrowingAdvice"/> 
		</aop:aspect> </aop:config> -->

	<!-- Definition for student bean -->
	<bean id="student" class="com.spring.learning.aop.Student">
		<property name="name" value="Zara" />
		<property name="age" value="11" />
	</bean>

	<!-- Definition for logging aspect -->
	<bean id="logging" class="com.spring.learning.aop.Logging" />

	<aop:aspectj-autoproxy />
	<bean id="loggingAspectJ" class="com.spring.learning.aop.LoggingAspectJ" />

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties" />
	</bean>


	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="createStudentMarks" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="createOperation"
			expression="execution(* com.spring.learning.jdbc.StudentDAO.createStudentMarks(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="createOperation" />
	</aop:config>

	<!-- Initialization for TransactionManager -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>


	<!-- Definition for studentJDBCTemplate bean -->
	<bean id="studentJDBCTemplate" class="com.spring.learning.jdbc.StudentJDBCTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

</beans>
